{"version":3,"sources":["components/Loading.js","api/index.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["Loading","id","className","BASE_URL","KEY","fetchQueryResultsFromURL","url","a","fetch","response","json","data","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Preview","setSearchResults","setIsLoading","setFeaturedResult","fetchPage","pageUrl","results","console","error","disabled","onClick","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","returnedValues","onSubmit","event","preventDefault","htmlFor","type","placeholder","value","onChange","length","name","target","map","eachThingInsidedArray","index","key","Title","App","info","searchResults","isLoading","ReactDOM","render","document","getElementById"],"mappings":"6KAkBeA,EARC,WACZ,OACI,yBAAKC,GAAG,WACL,wBAAIC,UAAU,WAAd,kB,uBCREC,EAAW,oCACXC,EAAM,8CAmBZ,SAAeC,EAAtB,kC,4CAAO,WAAwCC,GAAxC,iBAAAC,EAAA,+EAEoBC,MAAMF,GAF1B,cAEGG,EAFH,gBAGgBA,EAASC,OAHzB,cAGGC,EAHH,yBAKIA,GALJ,wG,sBAgBA,SAAeC,EAAtB,kC,4CAAO,uCAAAL,EAAA,6DACLM,EADK,EACLA,QACAC,EAFK,EAELA,eACAC,EAHK,EAGLA,YAEMT,EALD,UAKWH,EALX,mBAKgCC,EALhC,2BAKwDU,EALxD,oBAMHD,EANG,oBAMkBE,GANlB,kBASoBP,MAAMF,GAT1B,cASGG,EATH,gBAUgBA,EAASC,OAVzB,cAUGC,EAVH,yBAYIA,GAZJ,wG,sBAqBA,SAAeK,IAAtB,+B,4CAAO,kCAAAT,EAAA,0DACDU,aAAaC,QAAQ,aADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,eAFpC,cAKCZ,EALD,UAKWH,EALX,oBAKiCC,EALjC,kDAQoBI,MAAMF,GAR1B,cAQGG,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGU,EAAUV,EAAKU,QAErBJ,aAAaK,QAAQ,YAAaH,KAAKI,UAAUF,IAZ9C,kBAcIA,GAdJ,wG,sBAuBA,SAAeG,IAAtB,+B,4CAAO,kCAAAjB,EAAA,0DACDU,aAAaC,QAAQ,mBADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,qBAFpC,cAKCZ,EALD,UAKWH,EALX,2BAKwCC,EALxC,yCAQoBI,MAAMF,GAR1B,cAQGG,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGU,EAAUV,EAAKU,QAErBJ,aAAaK,QAAQ,kBAAmBH,KAAKI,UAAUF,IAZpD,kBAcIA,GAdJ,wG,sBC7EP,IA4DeI,EA5DC,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,iBAAqCC,GAAmB,EAAtCC,kBAAsC,EAAnBD,cAAmB,SAa1DE,EAb0D,8EAazE,WAAyBC,GAAzB,eAAAvB,EAAA,6DACEoB,GAAa,GADf,kBAI0BtB,EAAyByB,GAJnD,OAIUC,EAJV,OAKIL,EAAiBK,GALrB,gDAOIC,QAAQC,MAAR,MAPJ,yBASIN,GAAa,GATjB,6EAbyE,sBA0BzE,OACE,2BAAO1B,GAAG,WACR,4BAAQC,UAAU,cAEhB,4BAAQgC,SAAU,GAAIhC,UAAU,WAAWiC,QAASN,KAApD,YAIA,4BAAQK,SAAU,GAAIhC,UAAU,OAAOiC,QAASN,KAAhD,SAIF,6BAAS3B,UAAU,cC4FVkC,EA/HA,SAAC,GAAwC,IAAtCT,EAAqC,EAArCA,aAAcD,EAAuB,EAAvBA,iBAAuB,EAafW,mBAAS,IAbM,mBAa9CC,EAb8C,KAajCC,EAbiC,OAcDF,mBAAS,IAdR,mBAc9CG,EAd8C,KAc1BC,EAd0B,OAefJ,mBAAS,IAfM,mBAe9CtB,EAf8C,KAejC2B,EAfiC,OAgBvBL,mBAAS,OAhBc,mBAgB9CxB,EAhB8C,KAgBrC8B,EAhBqC,OAiBTN,mBAAS,OAjBA,mBAiB9CvB,EAjB8C,KAiB9B8B,EAjB8B,KAuDrD,OA7BAC,qBAAU,WACRC,QAAQC,IAAI,CAAC/B,IAAqBQ,MAA4BwB,MAC5D,SAACC,GACC,IACEV,EAAeU,EAAe,IAC9BR,EAAsBQ,EAAe,IACrC,MAAOhB,GACPD,QAAQC,MAAMA,SAInB,IAmBD,0BACEhC,GAAG,SACHiD,SAAQ,uCAAE,WAAOC,GAAP,eAAA5C,EAAA,6DAER4C,EAAMC,iBACNzB,GAAa,GAHL,kBAMgBf,EAAkB,CACtCC,UACAC,iBACAC,gBATI,OAMAgB,EANA,OAWNL,EAAiBK,GAXX,gDAaNC,QAAQC,MAAR,MAbM,yBAeNN,GAAa,GAfP,4EAAF,uDAmBR,kCACE,2BAAO0B,QAAQ,YAAf,SACA,2BACEpD,GAAG,WACHqD,KAAK,OACLC,YAAY,oBACZC,MAAOzC,EACP0C,SAAUf,KAGd,kCACE,2BAAOW,QAAQ,yBAAf,iBACiB,IACf,0BAAMnD,UAAU,wBAAhB,IACIsC,EAAmBkB,OADvB,MAIF,4BACEC,KAAK,iBACL1D,GAAG,wBACHuD,MAAO1C,EACP2C,SAAU,SAACN,GAAD,OAAWP,EAAkBO,EAAMS,OAAOJ,SAEpD,4BAAQA,MAAM,OAAd,OACChB,EAAmBqB,KAAI,SAACC,EAAuBC,GAAxB,OACtB,4BAAQC,IAAKD,GAAQD,EAAsBH,WAIjD,kCACE,2BAAON,QAAQ,kBAAf,WACU,0BAAMnD,UAAU,iBAAhB,IAAkCoC,EAAYoB,OAA9C,MAEV,4BACEC,KAAK,UACL1D,GAAG,iBACHuD,MAAO3C,EACP4C,SAAU,SAACN,GAAD,OAAWR,EAAWQ,EAAMS,OAAOJ,SAE7C,4BAAQA,MAAM,OAAd,OACClB,EAAYuB,KAAI,SAACC,EAAuBC,GAAxB,OACf,4BAAQC,IAAKD,GAAQD,EAAsBH,WAIjD,4CCzGSM,EAbD,WACV,OACI,yBAAKhE,GAAG,SACL,iDAGA,qFCRLiE,EAAM,WAAM,MAS0B7B,mBAAS,CAAE8B,KAAM,GAAI9C,QAAS,KATxD,mBAST+C,EATS,KASM1C,EATN,OAU4BW,mBAAS,MAVrC,gCAWkBA,oBAAS,IAX3B,mBAWTgC,EAXS,KAWE1C,EAXF,KAahB,OACE,yBAAKzB,UAAU,OAEb,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAQyB,aAAcA,EAAcD,iBAAkBA,IAEtD,kBAAC,EAAD,CACE0C,cAAeA,EACfzC,aAAcA,EACdD,iBAAkBA,IAKnB2C,EAAY,kBAAC,EAAD,MAAc,OASjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,S","file":"static/js/main.07b1de30.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n * \n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\n\nconst Loading = () => {\n    return (\n        <div id=\"loading\">\n           <h2 className=\"message\">Searching...</h2>\n         </div>\n    )\n};\n\nexport default Loading;","/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=6d41d63f-1f02-4648-b058-8c18fe236ecf';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React from \"react\";\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from \"../api\";\n\nconst Preview = ({ setSearchResults, setFeaturedResult, setIsLoading }) => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   *\n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n\n  /**\n   * Don't touch this function, it's good to go.\n   *\n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <aside id=\"preview\">\n      <header className=\"pagination\">\n        {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n        <button disabled={\"\"} className=\"previous\" onClick={fetchPage()}>\n          Previous\n        </button>\n        {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n        <button disabled={\"\"} className=\"next\" onClick={fetchPage()}>\n          Next\n        </button>\n      </header>\n      <section className=\"results\">\n        {/* Here we should map over the records, and render something like this for each one:\n          <div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n            }}>\n            { \n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            }\n          </div>\n        */}\n      </section>\n    </aside>\n  );\n};\n\nexport default Preview;\n","import React, { useEffect, useState } from \"react\";\n\n/**\n * Don't touch these imports!\n */\nimport {\n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults,\n} from \"../api\";\n\nconst Search = ({ setIsLoading, setSearchResults }) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   *\n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState(\"\");\n  const [century, setCentury] = useState(\"any\");\n  const [classification, setClassification] = useState(\"any\");\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   *\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   *\n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()]).then(\n      (returnedValues) => {\n        try {\n          setCenturyList(returnedValues[0]);\n          setClassificationList(returnedValues[1]);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    );\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   *\n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   *\n   * then, in a try/catch/finally block:\n   *\n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   *\n   * catch: error to console.error\n   *\n   * finally: call setIsLoading, set it to false\n   */\n  return (\n    <form\n      id=\"search\"\n      onSubmit={async (event) => {\n        // write code here\n        event.preventDefault();\n        setIsLoading(true);\n\n        try {\n          const results = await fetchQueryResults({\n            century,\n            classification,\n            queryString,\n          });\n          setSearchResults(results);\n        } catch (error) {\n          console.error(error);\n        } finally {\n          setIsLoading(false);\n        }\n      }}\n    >\n      <fieldset>\n        <label htmlFor=\"keywords\">Query</label>\n        <input\n          id=\"keywords\"\n          type=\"text\"\n          placeholder=\"enter keywords...\"\n          value={queryString}\n          onChange={setQueryString}\n        />\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-classification\">\n          Classification{\" \"}\n          <span className=\"classification-count\">\n            ({classificationList.length})\n          </span>\n        </label>\n        <select\n          name=\"classification\"\n          id=\"select-classification\"\n          value={classification}\n          onChange={(event) => setClassification(event.target.value)}\n        >\n          <option value=\"any\">Any</option>\n          {classificationList.map((eachThingInsidedArray, index) => (\n            <option key={index}>{eachThingInsidedArray.name}</option>\n          ))}\n        </select>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-century\">\n          Century <span className=\"century-count\">({centuryList.length})</span>\n        </label>\n        <select\n          name=\"century\"\n          id=\"select-century\"\n          value={century}\n          onChange={(event) => setCentury(event.target.value)}\n        >\n          <option value=\"any\">Any</option>\n          {centuryList.map((eachThingInsidedArray, index) => (\n            <option key={index}>{eachThingInsidedArray.name}</option>\n          ))}\n        </select>\n      </fieldset>\n      <button>SEARCH</button>\n    </form>\n  );\n};\n\nexport default Search;\n","import React from 'react';\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n * \n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\n\nconst Title = () => {\n    return (\n        <div id=\"title\">\n           <h1>\n             The Art Collector\n           </h1>\n           <h5>\n             Search the Harvard Art Museums' Private Collections\n           </h5>\n         </div> \n    )\n};\n\nexport default Title; ","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  //Feature,\n  Loading,\n  Preview,\n  Search,\n  Title,\n} from \"./components\";\n\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   *\n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n  const [searchResults, setSearchResults] = useState({ info: {}, records: [] });\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <div className=\"app\">\n      {/* <Title /> is static, doesn't need any props */}\n      <Title />\n      {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n      <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n      {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n      <Preview\n        searchResults={searchResults}\n        setIsLoading={setIsLoading}\n        setSearchResults={setSearchResults}\n      />\n      {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n      {/* <Loading /> is static, but should only render when isLoading is true */}\n      {/* use a ternary and render null if isLoading is false */}\n      {isLoading ? <Loading /> : null}\n    </div>\n  );\n};\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\nReactDOM.render(<App />, document.getElementById(\"app\"));\n"],"sourceRoot":""}